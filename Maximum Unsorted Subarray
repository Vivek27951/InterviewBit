You are given an array (zero indexed) of N non-negative integers, A0, A1 ,…, AN-1.

Find the minimum sub array Al, Al+1 ,…, Ar so if we sort(in ascending order) that sub array, then the whole array should get sorted.

If A is already sorted, output -1.

Example :

Input 1:

A = [1, 3, 2, 4, 5]

Return: [1, 2]

Input 2:

A = [1, 2, 3, 4, 5]

Return: [-1]
In the above example(Input 1), if we sort the subarray A1, A2, then whole array A should get sorted.








vector<int> Solution::subUnsort(vector<int> &A) {
    int n = A.size();
    if(n==1)
    {
        return {-1};
    }
    vector<int> arr(n);
    vector<int> brr(n);
    arr[0] = A[0];
    brr[n-1] = A[n-1];
    for(int i=1;i<n;i++)
    {
        arr[i] = max(arr[i-1],A[i]);
    }
    for(int i=n-2;i>=0;i--)
    {
        brr[i] = min(brr[i+1],A[i]);
    }
    int s = -1;
    int e = -1;
    for(int i=0;i<n;i++)
    {
        if(arr[i]!=brr[i])
        {
            s=i;
            break;
        }
    }
    if(s==-1)
        return {-1};
    for(int i=n-1;i>=0;i--)
    {
        if(arr[i]!=brr[i])
        {
            e=i;
            break;
        }
    }
    return {s,e};
}
