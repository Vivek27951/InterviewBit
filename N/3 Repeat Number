Problem Description

You're given a read only array of n integers. Find out if any integer occurs more than n/3 times in the array in linear time and constant additional space.
If so, return the integer. If not, return -1.

If there are multiple solutions, return any one.

Example:

Input: [1 2 3 1 1]
Output: 1 
1 occurs 3 times which is more than 5/3 times.






int Solution::repeatedNumber(const vector<int> &A) {

   //    first method
   
    // int n = A.size();
    // int t = n/3;
    // int fn = A[0], fc = 1;;
    // int sn = -1 , sc = -1;
    // for(int i=1;i<n;i++)
    // {
    //     if(A[i]==fn)
    //         fc++;
    //     else if(sn==-1)
    //     {
    //         sn = A[i];
    //         sc = 1;
    //     }
    //     else if(sn == A[i])
    //         sc++;
    //     else{
    //         if(sc<fc)
    //         {
    //             sc--;
    //         }
    //         else
    //         {
    //             fc--;
    //         }
    //     }
    //     if(sc<=0)
    //     {
    //         sn = A[i];
    //         sc = 1;
    //     }
    //     if(fc<=0)
    //     {
    //         fn = A[i];
    //         fc = 1;
    //     }
    // }
    // int c1 = 0;
    // int c2 = 0;
    // for(int i=0;i<n;i++)
    // {
    //     if(A[i]==fn)
    //         c1++;
    //     if(A[i]==sn)
    //         c2++;
    // }
    // if(c1>t)
    //     return fn;
    // if(c2>t)
    //     return sn;
    // return -1;


    //  second Method

    int count1,count2,num1,num2,size;
   size = A.size();
   count1=count2=0;
   num1=num2=-1;


   for(int i=0;i<size;i++){
    if(A[i]==num1)count1++;
    else if(A[i]==num2)count2++;
    else if(count1==0){count1=1; num1 = A[i];}
    else if(count2==0){count2=1; num2 = A[i];}
    else{count1--; count2--;}
   }

   count1=count2=0;
   for(int i=0;i<size;i++){
       if(A[i]==num1)count1++;
       if(A[i]==num2)count2++;
   }

   if(count1>size/3)return num1;
   if(count2>size/3)return num2;

   return -1;
}
