Given a positive integer n and a string s consisting only of letters D or I, you have to find any permutation of first n positive integer that satisfy the given input string.

D means the next number is smaller, while I means the next number is greater.

Notes

Length of given string s will always equal to n - 1
Your solution should run in linear time and space.
Example :

Input 1:

n = 3

s = ID

Return: [1, 3, 2]





vector<int> Solution::findPerm(const string A, int B) {
    int n = A.size();
    string a = A;
    a='I'+a+'I';
    vector<int>v;
    vector<int>temp;
    int  l =0;
    int k = 0;
    for(int i=0;i<a.size();i++)
    {
        if(a[i]=='I')
            temp.push_back(i);
    }
    for(int i=0;i<temp.size()-1;i++)
    {
        if(a[k]=='I')
        {
            l = l+temp[i+1]-temp[i];
            v.push_back(l);
        }
        else
        {
            v.push_back(v[v.size()-1]-1);
            i--;
        }
        k++;
    }
    for(int i=k;i<=n;i++)
    {
        v.push_back(v[v.size()-1]-1);
    }
    return v;
}
