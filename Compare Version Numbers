Compare two version numbers version1 and version2.

If version1 > version2 return 1,
If version1 < version2 return -1,
otherwise return 0.
You may assume that the version strings are non-empty and contain only digits and the . character.

The . character does not represent a decimal point and is used to separate number sequences.

For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 1.13 < 1.13.4








int Solution::compareVersion(string A, string B) {
    int cnt=0;
    for(int i=0;i<A.length();i++)
    {
        if(A[i]=='.')
        {
            cnt++;
            if(cnt>1)
            {
                A.erase(i,1);
                i--;
            }
        }
    }
    int cnt1=0;
    for(int i=0;i<B.length();i++)
    {
        if(B[i]=='.')
        {
            cnt1++;
            if(cnt1>1)
            {
                B.erase(i,1);
                i--;
            }
        }
    }
    long double ver1=stold(A),ver2=stold(B);
    if(ver1>ver2){
        return 1;
    }
    else if(ver1<ver2){
        return -1;
    }
    else
        return 0;
}
