Problem Description

Given a string A consisting only of lowercase characters, we need to check whether it is possible to make this string a palindrome after removing exactly one character from this.

If it is possible then return 1 else return 0.

Problem Constraints
3 <= |A| <= 105

 A[i] is always a lowercase character.

Input Format
First and only argument is an string A.

Output Format
Return 1 if it is possible to convert A to palindrome by removing exactly one character else return 0.


Example Input
Input 1:

 A = "abcba"
Input 2:

 A = "abecbea"

Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

 We can remove character ‘c’ to make string palindrome
Explanation 2:

 It is not possible to make this string palindrome just by removing one character
 
 
 
 
 
 
 
 
 
 
 int Solution::solve(string A) {
    // int n = A.size();
    // string B = A;
    // reverse(B.begin(),B.end());
    // if(A==B && n%2==1)
    //     return 1;
    // if(A==B && n%2==0)
    //     return 0;
    // int i = 0;
    // while(i<n)
    // {
    //     if(A[i]==B[i])
    //         i++;
    //     else
    //         break;
    // }
    // string temp = A.substr(0,i)+A.substr(i+1);
    // string temp2 = temp;
    // reverse(temp2.begin(),temp2.end());
    // if(temp==temp2)
    //     return 1;
    // temp = B.substr(0,i)+B.substr(i+1);
    // temp2 = temp;
    // reverse(temp2.begin(),temp2.end());
    // if(temp==temp2)
    //     return 1;
    // return 0;


    int count = 0, n = A.size();
    int i = 0, j = n-1;
    
    while(i<j){
        if (A[i] == A[j]){
            i++;
            j--;
        }
        else{
            if (A[i+1] == A[j]){
                i++;
                count++;
            }
            else if (A[i] == A[j-1]){
                j--;
                count++;
            }
            else{
                return 0;
            }
        }
    }
    
    return (count <= 1);
}
