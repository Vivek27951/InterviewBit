Problem Description

Given a string A of size N, find and return the longest palindromic substring in A.

Substring of string A is A[i...j] where 0 <= i <= j < len(A)

Palindrome string:

A string which reads the same backwards. More formally, A is palindrome if reverse(A) = A.

Incase of conflict, return the substring which occurs first ( with the least starting index).



Input Format
First and only argument is a string A.



Output Format
Return a string denoting the longest palindromic substring of string A.



Example Input
A = "aaaabaaa"


Example Output
"aaabaaa"


Example Explanation
We can see that longest palindromic substring is of length 7 and the string is "aaabaaa".











int helper(string A,int i)
{
    int count = 1;
    int l = i-1;
    int r = i+1;
    while(l>=0 && r<A.size())
    {
        if(A[l]==A[r])
        {
            l--;
            r++;
            count += 2; 
        }
        else
            break;
    }
    int count2 = 0;
    l=i-1;
    r=i;
    while(l>=0 && r<A.size())
    {
        if(A[l]==A[r])
        {
            l--;
            r++;
            count2+=2;
        }
        else    
            break;
    }
    return max(count,count2);
}
string Solution::longestPalindrome(string A) {
    int n = A.size();
    int index = 0;
    int len = 1;
    for(int i=1;i<n;i++)
    {
        int l = helper(A,i);
        if(l>len)
        {
            len = l;
            index = i-(l/2);
        }
    }
    return A.substr(index,len);
}
