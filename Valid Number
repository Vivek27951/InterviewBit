Note: It is intended for some problems to be ambiguous. You should gather all requirements up front before implementing one.

Please think of all the corner cases and clarifications yourself.

Validate if a given string is numeric.

Examples:

"0" => true
" 0.1 " => true
"abc" => false
"1 a" => false
"2e10" => true
Return 0 / 1 ( 0 for false, 1 for true ) for this problem

Clarify the question using “See Expected Output”

Is 1u ( which may be a representation for unsigned integers valid?

For this problem, no.

Is 0.1e10 valid?

Yes

-01.1e-10?

Yes

Hexadecimal numbers like 0xFF?

Not for the purpose of this problem

3. (. not followed by a digit)?

No

Can exponent have decimal numbers? 3e0.1?

Not for this problem.

Is 1f ( floating point number with f as prefix ) valid?

Not for this problem.

How about 1000LL or 1000L ( C++ representation for long and long long numbers )?

Not for this problem.

How about integers preceded by 00 or 0? like 008?

Yes for this problem













int Solution::isNumber(const string A) {
    int n = A.size();
    if(n==0)
        return 0;
    bool flag = false;
    int i = 0;
    while(i<n && A[i]==' ')i++;
    while(n>0 && A[n-1]==' ')n--;
    if(A[i]=='e' || A[n-1]=='.' || i>=n)
        return 0;
    for(;i<n;i++)
    {
        if(A[i]=='-' || (A[i]>='0' && A[i]<='9'))
            continue;
        if(A[i]=='.')
        {
            if(A[i+1]>='0' && A[i+1]<='9')
            {
                i++;
                continue;
            }
            else
                return 0;
        }
        if(A[i]=='e')
            break;
        return 0;
    }
    i++;
    for(;i<n;i++)
    {
        if(A[i]=='-' || (A[i]>='0' && A[i]<='9'))
            continue;
        return 0;
    }
    return 1;
}
