Suppose a sorted array A is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

The array will not contain duplicates.

NOTE 1: Also think about the case when there are duplicates. Does your current solution work? How does the time complexity change?*
PROBLEM APPROACH:

Note: If you know the number of times the array is rotated, then this problem becomes trivial. If the number of rotation is x, then minimum element is A[x].

Lets look at how we can calculate the number of times the array is rotated.






int Solution::findMin(const vector<int> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    int n = A.size();
    if(n==1)
        return A[0];
    int s = 0;
    int e = n-1;
    while(s<=e)
    {
        int m = s+((e-s)/2);
        int a = INT_MAX;
        int b = INT_MAX;
        if(m-1>=0)
            a = A[m-1];
        if(m+1<n)
            b = A[m+1];
        if(a>A[m] && b>A[m])
            return A[m];
        else if(A[m]>=A[s] && A[m]>=A[e])
            s=m+1;
        else 
            e=m-1;
    }
    return -1;
}
